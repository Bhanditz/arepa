#!/usr/bin/perl

use strict;
use warnings;
use English qw(-no_match_vars);
use Carp;
use Getopt::Long;

use Arepa::BuilderFarm;
use Arepa::Repository;

my ($r);
my $config_file = '/etc/arepa/config.yml';

Getopt::Long::Configure('pass_through');
$r = GetOptions('config|c=s', \$config_file);
if (!$r) {
    print STDERR "Invalid global options\n";
    exit 1;
}

my $command = shift || do {
    print STDERR "ERROR: I need a command\n";
    print STDERR "SYNTAX: arepa [-c|--config=config.yml] <command> [options]\n";
    print STDERR "where <command> is one of:\n";
    print STDERR "  build\n";
    print STDERR "  queue\n";
    print STDERR "  requeue\n";
    print STDERR "  showqueue\n";
    print STDERR "  sign\n";
    print STDERR "  sync\n";
    exit 1;
};

if ($command eq 'build') {
    my ($pending, $recompile) = (0, undef);
    $r = GetOptions('pending'     => \$pending,
                    'recompile=i' => \$recompile);
    if (!$r) {
        print STDERR "Invalid options for build command\n";
        exit 1;
    }

    my $farm       = Arepa::BuilderFarm->new($config_file);
    my $repository = Arepa::Repository->new($config_file);
    if ($pending) {
        foreach my $request ($farm->package_db->get_compilation_queue(status => 'pending')) {
            # Just get the first one if there are multiple matches
            my ($builder_info) = $farm->get_matching_builders(
                                                    $request->{architecture},
                                                    $request->{distribution});
            if (!defined $builder_info) {
                print STDERR "Goddamnit! There aren't any builders for $request->{distribution}/$request->{architecture}\n";
                exit 1;
            }
            my ($builder, $binnmu) = @$builder_info;
            my $source_pkg_id = $request->{source_package_id};
            my %source_attrs  = $farm->package_db->get_source_package_by_id($source_pkg_id);
            print "Compiling request id $request->{id}\n";
            print "$source_attrs{name} $source_attrs{full_version} ";
            print "(arch: $request->{architecture}, ";
            print "distro: $request->{distribution}) ";
            print "with builder $builder...\n";
            if ($farm->compile_package_from_queue($builder, $request->{id},
                                                  bin_nmu => $binnmu)) {
                print "*** SUCCESS ***\n";
                foreach my $deb_package (glob('*.deb')) {
                    print "Adding $deb_package to the repository\n";
                    if ($repository->insert_binary_package($deb_package,
                                                           $request->{distribution})) {
                        unlink $deb_package;
                    }
                }
            }
            else {
                print "*** FAILED ***\n";
            }
        }
    }
    elsif (defined $recompile) {
        my %req = $farm->package_db->get_compilation_request_by_id($recompile);

        # TODO: We should probably figure out if the builder should build this
        # as binNMU
        my ($builder, $binnmu) = ($req{builder}, 1);
        foreach my $info ($farm->get_matching_builders($req{architecture},
                                                       $req{distribution})) {
            # If the package hasn't been claimed, just get the first matching
            if (!$builder) {
                $builder = $info->[0];
            }
            # In any case, get the binNMU info of the appropriate builder
            if ($info->[0] eq $builder) {
                $binnmu = $info->[1];
            }
        }

        my %source_attrs  = $farm->package_db->get_source_package_by_id($req{source_package_id});
        print "Compiling request id $req{id}\n";
        print "$source_attrs{name} $source_attrs{full_version} ";
        print "(arch: $req{architecture}, ";
        print "distro: $req{distribution}) ";
        print "with builder $builder...\n";
        if ($farm->compile_package_from_queue($builder, $req{id},
                                              bin_nmu => $binnmu)) {
            print " done.\n";
            foreach my $deb_package (glob('*.deb')) {
                print "Adding $deb_package to the repository\n";
                if ($repository->insert_binary_package($deb_package,
                                                       $req{distribution})) {
                    unlink $deb_package;
                }
            }
        }
        else {
            print " failed.\n";
            print "Log:\n", $farm->last_build_log, "\n";
        }
    }
    else {
        my ($dsc_file, $builder) = @ARGV;
        if (!defined $dsc_file || !defined $builder) {
            print STDERR "ERROR: Need a dsc file and a builder name\n";
            exit 1;
        }
        $farm->compile_package_from_dsc($builder, $dsc_file,
                                        output_dir => '.');
        foreach my $deb_package (glob('*.deb')) {
            print "Adding $deb_package to the repository\n";
            if ($repository->insert_binary_package($deb_package)) {
                unlink $deb_package;
            }
        }
    }
}
elsif ($command eq 'queue') {
    my ($dsc_file, $distro) = @ARGV;
    if (!defined $dsc_file) {
        print STDERR "I need a dsc_file to queue\n";
        exit 1;
    }
    $distro ||= 'unstable';

    my $farm = Arepa::BuilderFarm->new($config_file);
    my %source_attrs = (distribution => $distro);
    open F, $dsc_file or croak("Can't open dsc file '$dsc_file'");
    while (my $line = <F>) {
        if ($line =~ /^Source: (.+)/) {
            $source_attrs{name} ||= $1;
        }
        elsif ($line =~ /^Architecture: (.+)/) {
            $source_attrs{architecture} ||= $1;
        }
        elsif ($line =~ /^Version: (.+)/) {
            $source_attrs{full_version} ||= $1;
        }
    }
    close F;

    print "Source package: $source_attrs{name} $source_attrs{full_version} ";
    print "(arch: $source_attrs{architecture}, ";
    print "distribution: $source_attrs{distribution})\n";

    # Queue the source package for compilation
    my $source_id = $farm->register_source_package(%source_attrs);
    $farm->request_package_compilation($source_id);
}
elsif ($command eq 'requeue') {
    my ($queue_id) = @ARGV;
    if (!defined $queue_id) {
        print STDERR "I need a queue id to requeue\n";
        exit 1;
    }
    my $config = Arepa::Config->new($config_file);
    my $pdb    = Arepa::PackageDb->new($config->get_key('package_db'));
    my %compilation_attrs = ();
    eval {
        %compilation_attrs = $pdb->get_compilation_request_by_id($queue_id);
    };
    if ($EVAL_ERROR) {
        print STDERR "Can't find compilation request '$queue_id'\n";
        print STDERR "Check with arepa showqueue\n";
        exit 1;
    }
    $pdb->mark_compilation_pending($queue_id);
}
elsif ($command eq 'showqueue') {
    my $status = 'pending';
    $r = GetOptions('status=s'     => \$status);
    if (!$r) {
        print STDERR "Invalid options for 'showqueue' command\n";
        exit 1;
    }
    my $config = Arepa::Config->new($config_file);
    my $pdb    = Arepa::PackageDb->new($config->get_key('package_db'));
    foreach my $elt ($pdb->get_compilation_queue(status => $status)) {
        my %source = $pdb->get_source_package_by_id($elt->{source_package_id});
        print $elt->{id}, ": $source{name} $source{full_version} ";
        print "$elt->{architecture} $elt->{distribution}\n";
    }
}
elsif ($command eq 'sign') {
    my $sync = 0;
    $r = GetOptions('sync' => \$sync);
    if (!$r) {
        print STDERR "Invalid options for 'sign' command\n";
        exit 1;
    }

    my $config    = Arepa::Config->new($config_file);
    my $repo_path = $config->get_key('repository:path');

    # Sign all the Release files
    my $repository = Arepa::Repository->new($config_file);
    foreach my $distribution ($repository->get_distributions) {
        my $distro_name = $distribution->{codename};
        my $release_file_path = File::Spec->catfile($repo_path,
                                                    "dists",
                                                    $distro_name,
                                                    "Release");
        my $gpg_cmd = "gpg -abs -o $release_file_path.gpg $release_file_path &>/dev/null";
        if (system($gpg_cmd) != 0) {
            print STDERR "ERROR: couldn't sign Release file for '$distro_name'\n";
            exit 1;
        }
    }

    # If --sync was passed, sync too
    if ($sync) {
        my $remote_repo_path = $config->get_key('repository:remote_path');
        my $rsync_cmd = "rsync -avz $repo_path $remote_repo_path";
        if (system($rsync_cmd) != 0) {
            print STDERR "ERROR: rsync command failed\n";
            print STDERR "Command was '$rsync_cmd'\n";
        }
    }
}
elsif ($command eq 'sync') {
    my $config = Arepa::Config->new($config_file);
    my $local_repo  = $config->get_key('repository:path');
    my $remote_repo = $config->get_key('repository:remote_path');
    my $rsync_cmd = "rsync -avz $local_repo $remote_repo";
    if (system($rsync_cmd) != 0) {
        print STDERR "ERROR: rsync command failed\n";
        print STDERR "Command was '$rsync_cmd'\n";
    }
}
else {
    print STDERR "ERROR: Unknown command '$command'\n";
    exit 1;
}

__END__
arepa build --pending       # Process build queue
arepa build <file.dsc>      # Builds the given .dsc in all relevant builders
arepa build <file.dsc> <builder_name>
arepa queue <file.dsc>
arepa queue <file.dsc> <arch>
arepa unqueue <file.dsc>
arepa unqueue <file.dsc> <arch>
arepa showqueue
